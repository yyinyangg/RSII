/*
 * Automatically generated by libJConfig-4.0-alpha0 @ rs2[fddccd3]
 * Generated From: ourSpi.jc4 (/home/rs01/RS2/Versuch1/ourSpi.jc4)
 * Generated at Tue May 16 14:11:25 CEST 2023
 * jConfig Built on Tue Nov 26 09:26:22 CET 2019, Build Hash E3AA1574
 *
 * Toplevel Verilog Module
 */

`default_nettype none

module configuration(
	input    wire 	 pin_CLOCK_USER,
	output   wire 	 pin_FMC_LA00_CC_N,
	output   wire 	 pin_FMC_LA02_N,
	output   wire 	 pin_FMC_LA02_P,
	output   wire 	 pin_FMC_LA03_P,
	inout    wire 	 pin_FMC_LA27_N,
	inout    wire 	 pin_FMC_LA27_P,
	input    wire 	 pin_GPIO_CPU_RESET,
	output   wire 	 pin_USB_1_RX,
	input    wire 	 pin_USB_1_TX
);


wire            clk_xilinx$clkfx;
wire            clk_xilinx$locked;
wire   [9:0]    spartanmc$bus_addr_block;
wire   [7:0]    spartanmc$bus_addr_high;
wire            spartanmc$bus_clk;
wire   [17:0]   spartanmc$bus_di;
wire   [17:0]   spartanmc$bus_do;
wire            spartanmc$bus_reset;
wire            spartanmc$bus_wr_high;
wire            spartanmc$bus_wr_low;
wire            spartanmc$code_access;
wire   [17:0]   spartanmc$code_addr;
wire            spartanmc$code_jmp;
wire            spartanmc$mem_access;
wire            spartanmc$peri_access;
wire            spartanmc$peri_wr;
wire   [17:0]   spartanmc_i2c_master$di_peri;
wire   [17:0]   spartanmc_port_out$di_peri;
wire            spartanmc_port_out$pin;
wire   [17:0]   spartanmc_spartanmc_mem_local$code_do;
wire   [17:0]   spartanmc_spartanmc_mem_local$mem_do;
wire   [17:0]   spartanmc_spi_master$di_peri;
wire            spartanmc_spi_master$mosi;
wire            spartanmc_spi_master$sclk;
wire            spartanmc_spi_master$ss;
wire   [17:0]   spartanmc_uart_light$di_peri;
wire            spartanmc_uart_light$tx;


clock #(
	.CLKDV_DIVIDE         	 ( 2.000000                                 ),
	.CLKFX_DIVIDE         	 ( 9                                        ),
	.CLKFX_MULTIPLY       	 ( 20                                       ),
	.CLKIN_DIVIDE_BY_2    	 ( "FALSE"                                  ),
	.DFS_FREQUENCY_MODE   	 ( "LOW"                                    ),
	.INSTANTIATE_BUFGFX   	 ( "NO"                                     ),
	.INSTANTIATE_BUFGS    	 ( "NO"                                     ),
	.INSTANTIATE_BUFGS2   	 ( "NO"                                     ),
	.RESET_LEVEL          	 ( "HIGH_ACTIVE"                            )	
) clk_xilinx (
	/* output */ 		 .clk1                 ( /* N/C */                                          ),
	/* output */ 		 .clk2                 ( /* N/C */                                          ),
	/* output */ 		 .clk270               ( /* N/C */                                          ),
	/* output */ 		 .clk2x                ( /* N/C */                                          ),
	/* output */ 		 .clk2x180             ( /* N/C */                                          ),
	/* input  */ 		 .clk_gen              ( pin_CLOCK_USER                                     ),
	/* output */ 		 .clkdv                ( /* N/C */                                          ),
	/* output */ 		 .clkfx                ( clk_xilinx$clkfx                                   ),
	/* output */ 		 .clkfx180             ( /* N/C */                                          ),
	/* output */ 		 .locked               ( clk_xilinx$locked                                  ),
	/* output */ 		 .phase                ( /* N/C */                                          ),
	/* input  */ 		 .reset                ( pin_GPIO_CPU_RESET                                 )
);

spartanmc #(
	.BRKPT_TRAP           	 ( 1                                        ),
	.CLOCK_GATING         	 ( "NO"                                     ),
	.CODEMEM_CAN_STALL    	 ( 0                                        ),
	.COUNT_BREAKPOINTS    	 ( 4                                        ),
	.COUNT_CYCLECOUNTERS  	 ( 1                                        ),
	.COUNT_EVENTCOUNTERS  	 ( 2                                        ),
	.COUNT_WATCHPOINTS    	 ( 4                                        ),
	.DATAMEM_CAN_STALL    	 ( 0                                        ),
	.FORWARDING_CAN_STALL 	 ( 0                                        ),
	.HARDWARE_DEBUGGING   	 ( 0                                        ),
	.HARDWARE_MUL         	 ( 1                                        ),
	.INTR_VECTOR          	 ( 64'h0                                    ),
	.IO_BASE_ADR          	 ( 64'h1FC00                                ),
	.PERFORMANCE_COUNTER  	 ( 0                                        ),
	.RESET_VECTOR         	 ( 64'h0                                    ),
	.SHOW_INSTR           	 ( 1                                        ),
	.SINGLE_SHIFT         	 ( 0                                        ),
	.SINGLE_STEP_TRAP     	 ( 3                                        ),
	.STOP_SIM_ON_PERI_S9  	 ( 1                                        ),
	.STOP_SIM_ON_X        	 ( 1                                        ),
	.WIDTH_CYCLECOUNTER   	 ( 36                                       ),
	.WIDTH_EVENTCOUNTER   	 ( 36                                       ),
	.WTCHPT_TRAP          	 ( 2                                        )	
) spartanmc (
	/* input  */ 		 .alarm                ( /* N/C */                                          ),
	/* input  */ 		 .clk                  ( clk_xilinx$clkfx                                   ),
	/* input  */ 		 .evcnt_ext0           ( /* N/C */                                          ),
	/* input  */ 		 .evcnt_ext1           ( /* N/C */                                          ),
	/* input  */ 		 .intr                 ( /* N/C */                                          ),
	/* output */ 		 .intr_enable          ( /* N/C */                                          ),
	/* output */ 		 .ir_return            ( /* N/C */                                          ),
	/* input  */ 		 .locked               ( clk_xilinx$locked                                  ),
	/* input  */ 		 .step                 ( /* N/C */                                          ),
	/* input  */ 		 .step_en_off          ( /* N/C */                                          ),
	/* input  */ 		 .step_en_on           ( /* N/C */                                          ),
	/* output */ 		 .bus_addr_block       ( spartanmc$bus_addr_block                           ),
	/* output */ 		 .bus_addr_high        ( spartanmc$bus_addr_high                            ),
	/* output */ 		 .bus_clk              ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .bus_di               ( spartanmc$bus_di                                   ),
	/* output */ 		 .bus_do               ( spartanmc$bus_do                                   ),
	/* output */ 		 .bus_reset            ( spartanmc$bus_reset                                ),
	/* output */ 		 .bus_wr_high          ( spartanmc$bus_wr_high                              ),
	/* output */ 		 .bus_wr_low           ( spartanmc$bus_wr_low                               ),
	/* output */ 		 .code_access          ( spartanmc$code_access                              ),
	/* output */ 		 .code_addr            ( spartanmc$code_addr                                ),
	/* input  */ 		 .code_busy            ( /* N/C */                                          ),
	/* input  */ 		 .code_di              ( spartanmc_spartanmc_mem_local$code_do              ),
	/* output */ 		 .code_jmp             ( spartanmc$code_jmp                                 ),
	/* output */ 		 .mem_access           ( spartanmc$mem_access                               ),
	/* input  */ 		 .mem_busy             ( /* N/C */                                          ),
	/* output */ 		 .peri_access          ( spartanmc$peri_access                              ),
	/* output */ 		 .peri_wr              ( spartanmc$peri_wr                                  )
);

i2c_master_top #(
	.BASE_ADR             	 ( 10'h0 /* System Address 0x0 */           )	
) spartanmc_i2c_master (
	/* output */ 		 .intr                 ( /* N/C */                                          ),
	/* inout  */ 		 .scl                  ( pin_FMC_LA27_N                                     ),
	/* inout  */ 		 .sda                  ( pin_FMC_LA27_P                                     ),
	/* input  */ 		 .access_peri          ( spartanmc$peri_access                              ),
	/* input  */ 		 .addr_peri            ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .clk_peri             ( spartanmc$bus_clk                                  ),
	/* output */ 		 .di_peri              ( spartanmc_i2c_master$di_peri                       ),
	/* input  */ 		 .do_peri              ( spartanmc$bus_do                                   ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .wr_peri              ( spartanmc$peri_wr                                  )
);

port_out #(
	.BASE_ADR             	 ( 10'h20 /* System Address 0x20 */         ),
	.PORT_WIDTH           	 ( 1                                        ),
	.SUPPORT_TRISTATE     	 ( 1                                        )	
) spartanmc_port_out (
	/* output */ 		 .pin                  ( spartanmc_port_out$pin                             ),
	/* input  */ 		 .access_peri          ( spartanmc$peri_access                              ),
	/* input  */ 		 .addr_peri            ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .clk_peri             ( spartanmc$bus_clk                                  ),
	/* output */ 		 .di_peri              ( spartanmc_port_out$di_peri                         ),
	/* input  */ 		 .do_peri              ( spartanmc$bus_do                                   ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .wr_peri              ( spartanmc$peri_wr                                  )
);

spartanmc_mem_local #(
	.BASE_ADDR            	 ( 18'h0 /* System Address 0x0 */           ),
	.RAMBLOCKS            	 ( 4                                        ),
	.SHOW_MEM             	 ( 1                                        )	
) spartanmc_spartanmc_mem_local (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .code_access          ( spartanmc$code_access                              ),
	/* input  */ 		 .code_addr            ( spartanmc$code_addr                                ),
	/* output */ 		 .code_do              ( spartanmc_spartanmc_mem_local$code_do              ),
	/* input  */ 		 .code_jmp             ( spartanmc$code_jmp                                 ),
	/* input  */ 		 .mem_access           ( spartanmc$mem_access                               ),
	/* input  */ 		 .mem_addr_block       ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .mem_addr_high        ( spartanmc$bus_addr_high                            ),
	/* input  */ 		 .mem_di               ( spartanmc$bus_do                                   ),
	/* output */ 		 .mem_do               ( spartanmc_spartanmc_mem_local$mem_do               ),
	/* input  */ 		 .mem_wr_high          ( spartanmc$bus_wr_high                              ),
	/* input  */ 		 .mem_wr_low           ( spartanmc$bus_wr_low                               ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                )
);

spi #(
	.BASE_ADR             	 ( 10'h10 /* System Address 0x10 */         ),
	.SPI_SS               	 ( 1                                        )	
) spartanmc_spi_master (
	/* input  */ 		 .clk_spi              ( clk_xilinx$clkfx                                   ),
	/* output */ 		 .intr                 ( /* N/C */                                          ),
	/* input  */ 		 .miso                 ( /* N/C */                                          ),
	/* output */ 		 .mosi                 ( spartanmc_spi_master$mosi                          ),
	/* output */ 		 .sclk                 ( spartanmc_spi_master$sclk                          ),
	/* output */ 		 .ss                   ( spartanmc_spi_master$ss                            ),
	/* input  */ 		 .access_peri          ( spartanmc$peri_access                              ),
	/* input  */ 		 .addr_peri            ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .clk_peri             ( spartanmc$bus_clk                                  ),
	/* output */ 		 .di_peri              ( spartanmc_spi_master$di_peri                       ),
	/* input  */ 		 .do_peri              ( spartanmc$bus_do                                   ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .wr_peri              ( spartanmc$peri_wr                                  )
);

spmc_uart_light_peri #(
	.BASE_ADR             	 ( 10'h18 /* System Address 0x18 */         ),
	.BAUDRATE             	 ( 115200                                   ),
	.CLOCK_FREQUENCY      	 ( 60000000                                 ),
	.ENABLE_TX_CHAIN      	 ( "FALSE"                                  ),
	.FIFO_RX_DEPTH        	 ( 8                                        ),
	.FIFO_TX_DEPTH        	 ( 8                                        ),
	.INTERRUPT_SUPPORTED  	 ( "FALSE"                                  ),
	.LOGFILE              	 ( "spartanmc.txt"                          ),
	.LOG_TO_FILE          	 ( 1                                        ),
	.PRINT_TX             	 ( 1                                        )	
) spartanmc_uart_light (
	/* output */ 		 .intr                 ( /* N/C */                                          ),
	/* input  */ 		 .rx                   ( pin_USB_1_TX                                       ),
	/* output */ 		 .tx                   ( spartanmc_uart_light$tx                            ),
	/* input  */ 		 .tx_chain_i           ( /* N/C */                                          ),
	/* input  */ 		 .access_peri          ( spartanmc$peri_access                              ),
	/* input  */ 		 .addr_peri            ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .clk_peri             ( spartanmc$bus_clk                                  ),
	/* output */ 		 .di_peri              ( spartanmc_uart_light$di_peri                       ),
	/* input  */ 		 .do_peri              ( spartanmc$bus_do                                   ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .wr_peri              ( spartanmc$peri_wr                                  )
);


// Bus Glue (Ex: Or gates that or together bus inputs)

orgate #(
	.OR_WIDTH             	 ( 5                                        ),
	.BUS_WIDTH            	 ( 18                                       )	
) bus_or_spartanmc_bus_di (
	/* input  */ 		 .a                    ( { spartanmc_uart_light$di_peri, spartanmc_spi_master$di_peri, spartanmc_port_out$di_peri, spartanmc_i2c_master$di_peri, spartanmc_spartanmc_mem_local$mem_do } ),
	/* output */ 		 .y                    ( spartanmc$bus_di                                   )
);


// Assigns for toplevel outputs

assign pin_FMC_LA00_CC_N                                  = spartanmc_port_out$pin;
assign pin_FMC_LA02_N                                     = spartanmc_spi_master$mosi;
assign pin_FMC_LA02_P                                     = spartanmc_spi_master$ss;
assign pin_FMC_LA03_P                                     = spartanmc_spi_master$sclk;
assign pin_USB_1_RX                                       = spartanmc_uart_light$tx;

// Verification for bus data
`ifdef SIMULATION
// Verifying /spartanmc/spartanmc_mem_local#BASE_ADDR on mem_do connected to /spartanmc
wire            _$$verification$spartanmc_spartanmc_mem_local$mem_do$_spartanmc;
// 	Verifying Address range 0x0 length 0x2000 on /spartanmc/spartanmc_mem_local#BASE_ADDR
bus_address_verification_watcher #(
	.BASE_ADR             	 ( 18'h0                                    ),
	.WORD_COUNT           	 ( 18'h2000                                 ),
	.ADDR_WIDTH           	 ( 18                                       )	
) _$$verification$spartanmc_spartanmc_mem_local$mem_do$_spartanmc$0 (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( {spartanmc$bus_addr_high, spartanmc$bus_addr_block} ),
	/* input  */ 		 .access               ( spartanmc$mem_access                               ),
	/* output */ 		 .select               ( _$$verification$spartanmc_spartanmc_mem_local$mem_do$_spartanmc )
);

bus_address_verification_top #(
	.COUNT                	 ( 1                                        ),
	.LOCATION             	 ( "/spartanmc/spartanmc_mem_local#BASE_ADDR on mem_do connected to /spartanmc" ),
	.DATA_WIDTH           	 ( 18                                       ),
	.ADDR_WIDTH           	 ( 18                                       ),
	.ADDRESS_RANGE        	 ( "[0-1FFF]"                               )	
) _$$verification$spartanmc_spartanmc_mem_local$mem_do$_spartanmc$top (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .data                 ( spartanmc_spartanmc_mem_local$mem_do               ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( {spartanmc$bus_addr_high, spartanmc$bus_addr_block} ),
	/* input  */ 		 .access               ( spartanmc$mem_access                               ),
	/* input  */ 		 .busy                 ( 1'b0                                               ),
	/* input  */ 		 .select               ( _$$verification$spartanmc_spartanmc_mem_local$mem_do$_spartanmc )
);

// Verifying /spartanmc/i2c_master#BASE_ADR on di_peri connected to /spartanmc
wire            _$$verification$spartanmc_i2c_master$di_peri$_spartanmc;
// 	Verifying Address range 0x0 length 0xb on /spartanmc/i2c_master#BASE_ADR
bus_address_verification_watcher #(
	.BASE_ADR             	 ( 18'h0                                    ),
	.WORD_COUNT           	 ( 18'hb                                    ),
	.ADDR_WIDTH           	 ( 10                                       )	
) _$$verification$spartanmc_i2c_master$di_peri$_spartanmc$0 (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .access               ( spartanmc$peri_access                              ),
	/* output */ 		 .select               ( _$$verification$spartanmc_i2c_master$di_peri$_spartanmc )
);

bus_address_verification_top #(
	.COUNT                	 ( 1                                        ),
	.LOCATION             	 ( "/spartanmc/i2c_master#BASE_ADR on di_peri connected to /spartanmc" ),
	.DATA_WIDTH           	 ( 18                                       ),
	.ADDR_WIDTH           	 ( 10                                       ),
	.ADDRESS_RANGE        	 ( "[0-A]"                                  )	
) _$$verification$spartanmc_i2c_master$di_peri$_spartanmc$top (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .data                 ( spartanmc_i2c_master$di_peri                       ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .access               ( spartanmc$peri_access                              ),
	/* input  */ 		 .busy                 ( 1'b0                                               ),
	/* input  */ 		 .select               ( _$$verification$spartanmc_i2c_master$di_peri$_spartanmc )
);

// Verifying /spartanmc/port_out#BASE_ADR on di_peri connected to /spartanmc
wire            _$$verification$spartanmc_port_out$di_peri$_spartanmc;
// 	Verifying Address range 0x20 length 0x2 on /spartanmc/port_out#BASE_ADR
bus_address_verification_watcher #(
	.BASE_ADR             	 ( 18'h20                                   ),
	.WORD_COUNT           	 ( 18'h2                                    ),
	.ADDR_WIDTH           	 ( 10                                       )	
) _$$verification$spartanmc_port_out$di_peri$_spartanmc$0 (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .access               ( spartanmc$peri_access                              ),
	/* output */ 		 .select               ( _$$verification$spartanmc_port_out$di_peri$_spartanmc )
);

bus_address_verification_top #(
	.COUNT                	 ( 1                                        ),
	.LOCATION             	 ( "/spartanmc/port_out#BASE_ADR on di_peri connected to /spartanmc" ),
	.DATA_WIDTH           	 ( 18                                       ),
	.ADDR_WIDTH           	 ( 10                                       ),
	.ADDRESS_RANGE        	 ( "[20-21]"                                )	
) _$$verification$spartanmc_port_out$di_peri$_spartanmc$top (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .data                 ( spartanmc_port_out$di_peri                         ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .access               ( spartanmc$peri_access                              ),
	/* input  */ 		 .busy                 ( 1'b0                                               ),
	/* input  */ 		 .select               ( _$$verification$spartanmc_port_out$di_peri$_spartanmc )
);

// Verifying /spartanmc/uart_light#BASE_ADR on di_peri connected to /spartanmc
wire            _$$verification$spartanmc_uart_light$di_peri$_spartanmc;
// 	Verifying Address range 0x18 length 0x3 on /spartanmc/uart_light#BASE_ADR
bus_address_verification_watcher #(
	.BASE_ADR             	 ( 18'h18                                   ),
	.WORD_COUNT           	 ( 18'h3                                    ),
	.ADDR_WIDTH           	 ( 10                                       )	
) _$$verification$spartanmc_uart_light$di_peri$_spartanmc$0 (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .access               ( spartanmc$peri_access                              ),
	/* output */ 		 .select               ( _$$verification$spartanmc_uart_light$di_peri$_spartanmc )
);

bus_address_verification_top #(
	.COUNT                	 ( 1                                        ),
	.LOCATION             	 ( "/spartanmc/uart_light#BASE_ADR on di_peri connected to /spartanmc" ),
	.DATA_WIDTH           	 ( 18                                       ),
	.ADDR_WIDTH           	 ( 10                                       ),
	.ADDRESS_RANGE        	 ( "[18-1A]"                                )	
) _$$verification$spartanmc_uart_light$di_peri$_spartanmc$top (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .data                 ( spartanmc_uart_light$di_peri                       ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .access               ( spartanmc$peri_access                              ),
	/* input  */ 		 .busy                 ( 1'b0                                               ),
	/* input  */ 		 .select               ( _$$verification$spartanmc_uart_light$di_peri$_spartanmc )
);

// Verifying /spartanmc/spi_master#BASE_ADR on di_peri connected to /spartanmc
wire            _$$verification$spartanmc_spi_master$di_peri$_spartanmc;
// 	Verifying Address range 0x10 length 0x4 on /spartanmc/spi_master#BASE_ADR
bus_address_verification_watcher #(
	.BASE_ADR             	 ( 18'h10                                   ),
	.WORD_COUNT           	 ( 18'h4                                    ),
	.ADDR_WIDTH           	 ( 10                                       )	
) _$$verification$spartanmc_spi_master$di_peri$_spartanmc$0 (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .access               ( spartanmc$peri_access                              ),
	/* output */ 		 .select               ( _$$verification$spartanmc_spi_master$di_peri$_spartanmc )
);

bus_address_verification_top #(
	.COUNT                	 ( 1                                        ),
	.LOCATION             	 ( "/spartanmc/spi_master#BASE_ADR on di_peri connected to /spartanmc" ),
	.DATA_WIDTH           	 ( 18                                       ),
	.ADDR_WIDTH           	 ( 10                                       ),
	.ADDRESS_RANGE        	 ( "[10-13]"                                )	
) _$$verification$spartanmc_spi_master$di_peri$_spartanmc$top (
	/* input  */ 		 .clk                  ( spartanmc$bus_clk                                  ),
	/* input  */ 		 .data                 ( spartanmc_spi_master$di_peri                       ),
	/* input  */ 		 .reset                ( spartanmc$bus_reset                                ),
	/* input  */ 		 .addr                 ( spartanmc$bus_addr_block                           ),
	/* input  */ 		 .access               ( spartanmc$peri_access                              ),
	/* input  */ 		 .busy                 ( 1'b0                                               ),
	/* input  */ 		 .select               ( _$$verification$spartanmc_spi_master$di_peri$_spartanmc )
);

`endif


endmodule


